services:
  mongodb:
    image: mongo:7.0
    container_name: email-builder-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: emailbuilder
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - email-builder-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  rabbitmq:
    image: "rabbitmq:3.13-management"
    container_name: email-builder-rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    user: "999:999"
    networks:
      - email-builder-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: "redis:alpine"
    container_name: email-builder-redis
    ports:
      - "6379:6379"
    networks:
      - email-builder-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: email-builder-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - email-builder-network

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: email-builder-worker
    restart: unless-stopped
    command: celery -A app.celery_worker.celery worker --loglevel=info
    env_file:
      - ./backend/.env
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - email-builder-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: email-builder-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_started
    networks:
      - email-builder-network

volumes:
  mongodb_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  email-builder-network:
    driver: bridge
